
// ChildView.h: CChildView 클래스의 인터페이스
//


#pragma once


// CChildView 창

class CChildView : public CWnd
{
// 생성입니다.
public:
	CChildView();
	int x=290, y=145;
	char cha;
	HENHMETAFILE hm;
	
// 특성입니다.
public:

// 작업입니다.
public:

// 재정의입니다.
	protected:
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);

// 구현입니다.
public:
	virtual ~CChildView();

	// 생성된 메시지 맵 함수
protected:
	afx_msg void OnPaint();
	DECLARE_MESSAGE_MAP()
public:
	afx_msg BOOL OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message);
	afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
	afx_msg void OnChar(UINT nChar, UINT nRepCnt, UINT nFlags);
	afx_msg void OnLButtonDown(UINT nFlags, CPoint point);
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




// ChildView.cpp: CChildView 클래스의 구현
//

#include "pch.h"
#include "framework.h"
#include "MFCApplication6.h"
#include "ChildView.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CChildView

CChildView::CChildView()
{
	CMetaFileDC dc;
	dc.CreateEnhanced(NULL, NULL, NULL, NULL);
	dc.Rectangle(x - 10, y - 10, x + 10, y + 10);
	hm = dc.CloseEnhanced();
	
}

CChildView::~CChildView()
{
	::DeleteEnhMetaFile(hm);
}


BEGIN_MESSAGE_MAP(CChildView, CWnd)
	ON_WM_PAINT()
	ON_WM_MOUSEMOVE()
	ON_WM_SETCURSOR()
	ON_WM_KEYDOWN()
	ON_WM_CHAR()
	ON_WM_LBUTTONDOWN()
	ON_WM_SYSCOMMAND()
END_MESSAGE_MAP()



// CChildView 메시지 처리기

BOOL CChildView::PreCreateWindow(CREATESTRUCT& cs) 
{
	if (!CWnd::PreCreateWindow(cs))
		return FALSE;

	cs.dwExStyle |= WS_EX_CLIENTEDGE;
	cs.style &= ~WS_BORDER;
	cs.lpszClass = AfxRegisterWndClass(CS_HREDRAW|CS_VREDRAW|CS_DBLCLKS, 
		::LoadCursor(nullptr, IDC_ARROW), reinterpret_cast<HBRUSH>(COLOR_WINDOW+1), nullptr);

	return TRUE;
}

void CChildView::OnPaint() 
{
	CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.
	CBrush rbr, gbr, bbr, kbr;
	CRgn rgn;
	rgn.CreateRectRgn(x, y, x + 200, y + 200);
	rbr.CreateSolidBrush(RGB(255, 0, 0));
	gbr.CreateSolidBrush(RGB(0,255,0));
	bbr.CreateSolidBrush(RGB(0,0,255));
	kbr.CreateSolidBrush(RGB(255, 255, 255));
	if (cha=='R')
		dc.SelectObject(rbr);
	else if (cha == 'G')
		dc.SelectObject(gbr);
	else if (cha == 'B')
		dc.SelectObject(bbr);

	// TODO: 여기에 메시지 처리기 코드를 추가합니다.
	dc.Ellipse(x,y,x+200,y+200);

	// 그리기 메시지에 대해서는 CWnd::OnPaint()를 호출하지 마십시오.
}
BOOL CChildView::OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	
	if (nHitTest == HTCLIENT) {
		CRgn rgn;
		rgn.CreateRectRgn(x, y, x + 200, y + 200);
		CPoint point;
		::GetCursorPos(&point);
		ScreenToClient(&point);
		if (rgn.PtInRegion(point))
			::SetCursor(AfxGetApp()->LoadStandardCursor(IDC_ARROW));
		else
			::SetCursor(AfxGetApp()->LoadStandardCursor(IDC_CROSS));
		return true;
	}
	return CWnd::OnSetCursor(pWnd, nHitTest, message);
}


void CChildView::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	CRgn rgn;
	
	if (nChar == VK_LEFT) {
		rgn.CreateRectRgn(x - 50, y - 50, x + 250, y + 250);
		if (x < 12)
			x += 20;
		x -= 20;
		InvalidateRgn(&rgn, 1);
//		Invalidate();
	}
	if (nChar == VK_RIGHT) {
		rgn.CreateRectRgn(x - 50, y - 50, x + 250, y + 250);
		if (x > 560)
			x -= 20;
		x += 20;
		InvalidateRgn(&rgn, 1);
//		Invalidate();
	}
	if (nChar == VK_UP) {
		rgn.CreateRectRgn(x - 50, y - 50, x + 250, y + 250);
		if (y < 12)
			y += 20;
		y -= 20; InvalidateRgn(&rgn, 1);
//		Invalidate();
	}
	if (nChar == VK_DOWN) {
		rgn.CreateRectRgn(x-50, y-50, x + 250, y + 250);
		if (y > 270)
			y -= 20;
		y += 20; InvalidateRgn(&rgn, 1);
//		Invalidate();
	}
	CWnd::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CChildView::OnChar(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CRgn rgn;
	rgn.CreateRectRgn(x, y, x + 200, y + 200);
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	if (nChar == _T('R')|| nChar == _T('r')) {
		cha = 'R';
		InvalidateRgn(&rgn, 1);
	}
	if (nChar == _T('G')|| nChar == _T('g')) {
		cha = 'G';
		InvalidateRgn(&rgn, 1);
	}
	if (nChar == _T('B')|| nChar == _T('b')) {
		cha = 'B';
		InvalidateRgn(&rgn, 1);
	}
	CWnd::OnChar(nChar, nRepCnt, nFlags);
}


void CChildView::OnLButtonDown(UINT nFlags, CPoint point)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	CClientDC dc(this);
	CRect rect(point.x - 10, point.y - 10, point.x + 10, point.y + 10);
	dc.PlayMetaFile(hm, &rect);
	CWnd::OnLButtonDown(nFlags, point);
}


